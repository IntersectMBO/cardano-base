name: Haskell CI

on:
  pull_request:
    branches: [ "**" ]

jobs:
  whitespace:
    runs-on: ubuntu-latest

    defaults:
      run:
        shell: bash

    strategy:
      fail-fast: false

    steps:
    - uses: actions/checkout@v3

    - name: Trailing whitespace check
      if: matrix.os != 'windows-latest'
      run: |
        offenders="$(git grep "\s$" -- *.hs *.c *.h *.nix *.yml *.md || true)";
        if [ -n "${offenders}" ]; then
          echo -e "Fix trailing whitespace in:\n"
          echo -n "${offenders}"
          exit 1
        fi

  build:
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        ghc: ["8.10.7", "9.2.7"]
        os: [windows-latest]

    env:
      # Modify this value to "invalidate" the cabal cache.
      CABAL_CACHE_VERSION: "2023-03-22"

      # current ref from: 27.02.2022
      SECP256K1_REF: ac83be33d0956faf6b7f61a60ab524ef7d6a473a
      # current ref from: 25.11.2022
      BLST_REF: 03b5124029979755c752eec45f3c29674b558446

      # Modify this value to "invalidate" the secp cache.
      SECP_CACHE_VERSION: "2023-03-22"

    steps:
    - name: Install Haskell
      uses: input-output-hk/setup-haskell@v1
      id: setup-haskell
      with:
        ghc-version: ${{ matrix.ghc }}
        cabal-version: 3.10.1.0
        pacman-packages: >
          mingw-w64-x86_64-pkg-config
          mingw-w64-x86_64-libsodium
          base-devel
          autoconf-wrapper
          autoconf
          automake
          libtool
          make

    - uses: actions/checkout@v3

    - name: "[PowerShell] Add build script path"
      if: runner.os == 'Windows'
      shell: pwsh
      run: Add-Content $env:GITHUB_PATH "$(pwd)/.github/bin"

    - name: "[Bash] Add build script path"
      if: runner.os != 'Windows'
      run: echo "$(pwd)/.github/bin" >> $GITHUB_PATH

    - name: "LINUX: Install build environment (apt-get)"
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get -y install libsodium23 libsodium-dev
        sudo apt-get -y remove --purge software-properties-common
        sudo apt-get -y autoremove

    - name: "LINUX: Install build environment (for secp256k1)"
      if: runner.os == 'Linux'
      run: sudo apt-get -y install autoconf automake libtool

    - name: "MAC: Install build environment (brew)"
      if: runner.os == 'macOS'
      run: |
        brew install libsodium

    - name: "MAC: Install build environment (for secp256k1)"
      if: runner.os == 'macOS'
      run: brew install autoconf automake libtool

    - name: "WINDOWS: Install blst"
      if: runner.os == 'Windows'
      env:
        MSYS2_PATH_TYPE: inherit
        MSYSTEM: MINGW64
      run: C:\\msys64\\usr\\bin\\bash.exe .github/workflows/build-blst.bash

    - name: "NON-WINDOWS: Install blst"
      if: runner.os != 'Windows'
      run: .github/workflows/build-blst.bash

    - name: Install secp256k1
      uses: input-output-hk/setup-secp256k1@v1
      with:
        git-ref: ${{ env.SECP256K1_REF }}
        cache-version: ${{ env.SECP_CACHE_VERSION }}

    - name: Cabal update
      run: cabal update

    - name: Configure build
      shell: bash
      run: |
        if [ "${{github.event.inputs.tests}}" == "all" ]; then
          echo "Reconfigure cabal projects to run tests for all dependencies"
          sed -i 's|tests: False|tests: True|g' cabal.project
        fi

        cp ".github/workflows/cabal.project.local.ci.$(uname -s)" cabal.project.local

        echo "# cabal.project.local"
        cat cabal.project.local

    - name: Record dependencies
      id: record-deps
      run: |
        # The tests call out to msys2 commands. We generally do not want to mix toolchains, so
        # we are very deliberate about only adding msys64 to the path where absolutely necessary.
        ${{ (runner.os == 'Windows' && '$env:PATH=("C:\msys64\mingw64\bin;{0}" -f $env:PATH)') || '' }}
        cabal build all --dry-run
        cat dist-newstyle/cache/plan.json | jq -r '."install-plan"[].id' | sort | uniq > dependencies.txt

    - name: Cache Cabal store
      uses: actions/cache@v3
      with:
        path: |
          ${{ steps.setup-haskell.outputs.cabal-store }}
          dist-newstyle
        key: cache-${{ env.CABAL_CACHE_VERSION }}-${{ runner.os }}-${{ matrix.ghc }}-${{ hashFiles('dependencies.txt') }}

    - name: Install dependencies
      run: |
        # The tests call out to msys2 commands. We generally do not want to mix toolchains, so
        # we are very deliberate about only adding msys64 to the path where absolutely necessary.
        ${{ (runner.os == 'Windows' && '$env:PATH=("C:\msys64\mingw64\bin;{0}" -f $env:PATH)') || '' }}
        cabal build all --enable-tests --only-dependencies

#    - name: Build [WIN - testing]
#      if: runner.os == 'Windows'
#      run: cabal build all --enable-tests --extra-lib-dirs ${env:GITHUB_WORKSPACE}/blst-sources/blst

    - name: Build
#      if: runner.os != 'Windows'
      run: |
        echo ${env:GITHUB_WORKSPACE}
        echo ${GITHUB_WORKSPACE}
        echo $(cygpath -u "${env:GITHUB_WORKSPACE}")
        cabal build all --enable-tests --test-show-details=direct -j1 -v3 --extra-lib-dirs "${env:GITHUB_WORKSPACE}/blst-sources/blst"

#    - name: Run tests [WIN]
#      if: runner.os == 'Windows'
#      env:
#        MSYS2_PATH_TYPE: inherit
#        MSYSTEM: MINGW64
#      run: cabal test all --enable-tests --test-show-details=direct -j1 -v3 --extra-lib-dirs ${env:GITHUB_WORKSPACE}/blst-sources/blst

    - name: Run tests
      run: cabal test all --enable-tests --test-show-details=direct -j1 -v3 --extra-lib-dirs ${env:GITHUB_WORKSPACE}/blst-sources/blst

    - uses: actions/upload-artifact@v3
      with:
        name: Build & test logs
        path: |
          dist-newstyle/**/*.log

    # - name: Run benchmarks
    #   run: cabal bench all --enable-tests

    # Uncomment the following back in for debugging. Remember to launch a `pwsh` from
    # the tmux session to debug `pwsh` issues. And be reminded that the `/msys2` and
    # `/msys2/mingw64` paths are not in PATH by default for the workflow, but tmate
    # will put them in.
    # You may also want to run
    #
    #   $env:PATH=("C:\Program Files\PowerShell\7;{0}" -f $env:ORIGINAL_PATH)
    #
    # to restore the original path.  Do note that some test might need msys2
    # and will silently fail if msys2 is not in path. See the "Run tests" step.
    #
    - name: Setup tmate session
      if: ${{ failure() }}
      uses: mxschmitt/action-tmate@v3
      # with:
      #   limit-access-to-actor: true
